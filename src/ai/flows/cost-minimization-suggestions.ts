// CostMinimizationSuggestions story implementation
'use server';

/**
 * @fileOverview A cost minimization suggestion AI agent.
 *
 * - costMinimizationSuggestions - A function that suggests cost minimization strategies based on family spending habits and product needs.
 * - CostMinimizationInput - The input type for the costMinimizationSuggestions function.
 * - CostMinimizationOutput - The return type for the costMinimizationSuggestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CostMinimizationInputSchema = z.object({
  spendingHabits: z
    .string()
    .describe(
      'A detailed description of the family’s spending habits, including categories and amounts.'
    ),
  productNeeds: z
    .string()
    .describe(
      'A list of monthly product needs, including product names, quantities, units, and prices.'
    ),
});
export type CostMinimizationInput = z.infer<typeof CostMinimizationInputSchema>;

const CostMinimizationOutputSchema = z.object({
  suggestions: z
    .string()
    .describe(
      'A list of cost-minimization strategies tailored to the family’s spending habits and product needs.'
    ),
});
export type CostMinimizationOutput = z.infer<typeof CostMinimizationOutputSchema>;

export async function costMinimizationSuggestions(
  input: CostMinimizationInput
): Promise<CostMinimizationOutput> {
  return costMinimizationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'costMinimizationPrompt',
  input: {schema: CostMinimizationInputSchema},
  output: {schema: CostMinimizationOutputSchema},
  prompt: `You are a financial advisor specializing in family budgeting. Analyze the family's spending habits and product needs to suggest cost-minimization strategies.

Spending Habits: {{{spendingHabits}}}
Product Needs: {{{productNeeds}}}

Suggest specific, actionable strategies to reduce expenses and save money for the family.`,
});

const costMinimizationFlow = ai.defineFlow(
  {
    name: 'costMinimizationFlow',
    inputSchema: CostMinimizationInputSchema,
    outputSchema: CostMinimizationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);




















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































